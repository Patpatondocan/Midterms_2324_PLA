#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Midterms_2324_PLA
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="MidtermsDatabase")]
	public partial class Database_midtermsDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertDb_User(Db_User instance);
    partial void UpdateDb_User(Db_User instance);
    partial void DeleteDb_User(Db_User instance);
    partial void InsertDb_Transaction(Db_Transaction instance);
    partial void UpdateDb_Transaction(Db_Transaction instance);
    partial void DeleteDb_Transaction(Db_Transaction instance);
    partial void InsertDb_Product(Db_Product instance);
    partial void UpdateDb_Product(Db_Product instance);
    partial void DeleteDb_Product(Db_Product instance);
    #endregion
		
		public Database_midtermsDataContext() : 
				base(global::Midterms_2324_PLA.Properties.Settings.Default.MidtermsDatabaseConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public Database_midtermsDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public Database_midtermsDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public Database_midtermsDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public Database_midtermsDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Db_User> Db_Users
		{
			get
			{
				return this.GetTable<Db_User>();
			}
		}
		
		public System.Data.Linq.Table<Db_Transaction> Db_Transactions
		{
			get
			{
				return this.GetTable<Db_Transaction>();
			}
		}
		
		public System.Data.Linq.Table<Db_Product> Db_Products
		{
			get
			{
				return this.GetTable<Db_Product>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Db_Users")]
	public partial class Db_User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _UserID;
		
		private string _Password;
		
		private string _Position;
		
		private EntitySet<Db_Transaction> _Db_Transactions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIDChanging(string value);
    partial void OnUserIDChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnPositionChanging(string value);
    partial void OnPositionChanged();
    #endregion
		
		public Db_User()
		{
			this._Db_Transactions = new EntitySet<Db_Transaction>(new Action<Db_Transaction>(this.attach_Db_Transactions), new Action<Db_Transaction>(this.detach_Db_Transactions));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="NVarChar(15) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="NVarChar(15) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Position", DbType="NVarChar(25) NOT NULL", CanBeNull=false)]
		public string Position
		{
			get
			{
				return this._Position;
			}
			set
			{
				if ((this._Position != value))
				{
					this.OnPositionChanging(value);
					this.SendPropertyChanging();
					this._Position = value;
					this.SendPropertyChanged("Position");
					this.OnPositionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Db_User_Db_Transaction", Storage="_Db_Transactions", ThisKey="UserID", OtherKey="UserID")]
		public EntitySet<Db_Transaction> Db_Transactions
		{
			get
			{
				return this._Db_Transactions;
			}
			set
			{
				this._Db_Transactions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Db_Transactions(Db_Transaction entity)
		{
			this.SendPropertyChanging();
			entity.Db_User = this;
		}
		
		private void detach_Db_Transactions(Db_Transaction entity)
		{
			this.SendPropertyChanging();
			entity.Db_User = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Db_Transaction")]
	public partial class Db_Transaction : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _TransactionID;
		
		private string _Pname;
		
		private int _PTquantity;
		
		private string _UserID;
		
		private System.DateTime _PTdatetime;
		
		private EntityRef<Db_Product> _Db_Product;
		
		private EntityRef<Db_User> _Db_User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTransactionIDChanging(string value);
    partial void OnTransactionIDChanged();
    partial void OnPnameChanging(string value);
    partial void OnPnameChanged();
    partial void OnPTquantityChanging(int value);
    partial void OnPTquantityChanged();
    partial void OnUserIDChanging(string value);
    partial void OnUserIDChanged();
    partial void OnPTdatetimeChanging(System.DateTime value);
    partial void OnPTdatetimeChanged();
    #endregion
		
		public Db_Transaction()
		{
			this._Db_Product = default(EntityRef<Db_Product>);
			this._Db_User = default(EntityRef<Db_User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TransactionID", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string TransactionID
		{
			get
			{
				return this._TransactionID;
			}
			set
			{
				if ((this._TransactionID != value))
				{
					this.OnTransactionIDChanging(value);
					this.SendPropertyChanging();
					this._TransactionID = value;
					this.SendPropertyChanged("TransactionID");
					this.OnTransactionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Pname", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Pname
		{
			get
			{
				return this._Pname;
			}
			set
			{
				if ((this._Pname != value))
				{
					this.OnPnameChanging(value);
					this.SendPropertyChanging();
					this._Pname = value;
					this.SendPropertyChanged("Pname");
					this.OnPnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PTquantity", DbType="Int NOT NULL")]
		public int PTquantity
		{
			get
			{
				return this._PTquantity;
			}
			set
			{
				if ((this._PTquantity != value))
				{
					this.OnPTquantityChanging(value);
					this.SendPropertyChanging();
					this._PTquantity = value;
					this.SendPropertyChanged("PTquantity");
					this.OnPTquantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="NVarChar(15) NOT NULL", CanBeNull=false)]
		public string UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._Db_User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PTdatetime", DbType="DateTime NOT NULL")]
		public System.DateTime PTdatetime
		{
			get
			{
				return this._PTdatetime;
			}
			set
			{
				if ((this._PTdatetime != value))
				{
					this.OnPTdatetimeChanging(value);
					this.SendPropertyChanging();
					this._PTdatetime = value;
					this.SendPropertyChanged("PTdatetime");
					this.OnPTdatetimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Db_Transaction_Db_Product", Storage="_Db_Product", ThisKey="TransactionID", OtherKey="Pid", IsUnique=true, IsForeignKey=false)]
		public Db_Product Db_Product
		{
			get
			{
				return this._Db_Product.Entity;
			}
			set
			{
				Db_Product previousValue = this._Db_Product.Entity;
				if (((previousValue != value) 
							|| (this._Db_Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Db_Product.Entity = null;
						previousValue.Db_Transaction = null;
					}
					this._Db_Product.Entity = value;
					if ((value != null))
					{
						value.Db_Transaction = this;
					}
					this.SendPropertyChanged("Db_Product");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Db_User_Db_Transaction", Storage="_Db_User", ThisKey="UserID", OtherKey="UserID", IsForeignKey=true)]
		public Db_User Db_User
		{
			get
			{
				return this._Db_User.Entity;
			}
			set
			{
				Db_User previousValue = this._Db_User.Entity;
				if (((previousValue != value) 
							|| (this._Db_User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Db_User.Entity = null;
						previousValue.Db_Transactions.Remove(this);
					}
					this._Db_User.Entity = value;
					if ((value != null))
					{
						value.Db_Transactions.Add(this);
						this._UserID = value.UserID;
					}
					else
					{
						this._UserID = default(string);
					}
					this.SendPropertyChanged("Db_User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Db_Product")]
	public partial class Db_Product : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Pid;
		
		private string _Pname;
		
		private string _Pdescrip;
		
		private int _Pstock;
		
		private int _Pcost;
		
		private int _Psellingprice;
		
		private EntityRef<Db_Transaction> _Db_Transaction;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPidChanging(string value);
    partial void OnPidChanged();
    partial void OnPnameChanging(string value);
    partial void OnPnameChanged();
    partial void OnPdescripChanging(string value);
    partial void OnPdescripChanged();
    partial void OnPstockChanging(int value);
    partial void OnPstockChanged();
    partial void OnPcostChanging(int value);
    partial void OnPcostChanged();
    partial void OnPsellingpriceChanging(int value);
    partial void OnPsellingpriceChanged();
    #endregion
		
		public Db_Product()
		{
			this._Db_Transaction = default(EntityRef<Db_Transaction>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Pid", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Pid
		{
			get
			{
				return this._Pid;
			}
			set
			{
				if ((this._Pid != value))
				{
					if (this._Db_Transaction.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPidChanging(value);
					this.SendPropertyChanging();
					this._Pid = value;
					this.SendPropertyChanged("Pid");
					this.OnPidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Pname", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Pname
		{
			get
			{
				return this._Pname;
			}
			set
			{
				if ((this._Pname != value))
				{
					this.OnPnameChanging(value);
					this.SendPropertyChanging();
					this._Pname = value;
					this.SendPropertyChanged("Pname");
					this.OnPnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Pdescrip", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Pdescrip
		{
			get
			{
				return this._Pdescrip;
			}
			set
			{
				if ((this._Pdescrip != value))
				{
					this.OnPdescripChanging(value);
					this.SendPropertyChanging();
					this._Pdescrip = value;
					this.SendPropertyChanged("Pdescrip");
					this.OnPdescripChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Pstock", DbType="Int NOT NULL")]
		public int Pstock
		{
			get
			{
				return this._Pstock;
			}
			set
			{
				if ((this._Pstock != value))
				{
					this.OnPstockChanging(value);
					this.SendPropertyChanging();
					this._Pstock = value;
					this.SendPropertyChanged("Pstock");
					this.OnPstockChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Pcost", DbType="Int NOT NULL")]
		public int Pcost
		{
			get
			{
				return this._Pcost;
			}
			set
			{
				if ((this._Pcost != value))
				{
					this.OnPcostChanging(value);
					this.SendPropertyChanging();
					this._Pcost = value;
					this.SendPropertyChanged("Pcost");
					this.OnPcostChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Psellingprice", DbType="Int NOT NULL")]
		public int Psellingprice
		{
			get
			{
				return this._Psellingprice;
			}
			set
			{
				if ((this._Psellingprice != value))
				{
					this.OnPsellingpriceChanging(value);
					this.SendPropertyChanging();
					this._Psellingprice = value;
					this.SendPropertyChanged("Psellingprice");
					this.OnPsellingpriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Db_Transaction_Db_Product", Storage="_Db_Transaction", ThisKey="Pid", OtherKey="TransactionID", IsForeignKey=true)]
		public Db_Transaction Db_Transaction
		{
			get
			{
				return this._Db_Transaction.Entity;
			}
			set
			{
				Db_Transaction previousValue = this._Db_Transaction.Entity;
				if (((previousValue != value) 
							|| (this._Db_Transaction.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Db_Transaction.Entity = null;
						previousValue.Db_Product = null;
					}
					this._Db_Transaction.Entity = value;
					if ((value != null))
					{
						value.Db_Product = this;
						this._Pid = value.TransactionID;
					}
					else
					{
						this._Pid = default(string);
					}
					this.SendPropertyChanged("Db_Transaction");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
